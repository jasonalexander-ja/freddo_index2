{"version":3,"sources":["graphing.js","index.js"],"names":["Graph","props","console","log","state","graphHeight","graphWidth","textClassName","className","lineClassName","xTextOffset","yTextOffset","xLabels","numXLabels","yLabels","numYLabels","xyObjArr","this","graphData","xOffset","yOffset","xyStats","dataObj","map","val","x","y","parseFloat","xMin","xMax","yMin","yMax","forEach","xRange","yRange","toFixed","getXYStats","xyCoordinates","xyObjstats","w","h","xNegOffset","yNegOffset","height","width","xMultiplier","yMultiplier","Math","floor","getDisplayData","labels","xyObjStats","xNum","yNum","useableWidth","useableHeight","xIncrement","yIncrement","xPosIncrement","yPosIncrement","i","xPos","text","toString","push","yPos","Lables","polylinePoints","points","React","Component","APIOrigin","Main","year","Date","getFullYear","currency","costPs","getPriceOnYear","changeObj","exchangeRates","currentRates","exchangeRate","error","errorMsg","conversionObj","periodExchangeObj","curr","code","currencyOptions","obj","value","setState","changes","dateRange","startYear","psDataset","convertedDataset","rate","yearOptions","list","optionList","reverse","generateDateOptions","hidden","getGraphData","id","onChange","updateYear","document","getElementById","updateCurrency","data","date","range","length","fetchJSON","uri","a","fetch","then","res","json","getChangeObj","changePoints","catch","e","getCurrencyOptions","options","getCurrentRates","rates","getPeriodExchangeRates","from","until","retObj","err","origin","initConversionObj","periodExchangeRates","ReactDOM","render","main"],"mappings":"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","file":"static/js/main.964aa23f.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction Lables(xyObjStats, xTextOffset, yTextOffset, className, xNum, yNum, width, height, xOffset, yOffset) {\r\n    const useableWidth = width - (2 * xOffset), useableHeight = height - (2 * yOffset);\r\n    const xIncrement = xyObjStats.xRange / xNum, yIncrement = xyObjStats.yRange / yNum;\r\n    const xPosIncrement = useableWidth / xNum, yPosIncrement = useableHeight / yNum;\r\n    let labels = [];\r\n    for(let i = 0; i <= xNum; i++) {\r\n        let xPos = i * xPosIncrement;\r\n        let text = parseFloat((xyObjStats.xMin + i * xIncrement).toFixed(0)).toString();\r\n        labels.push(<text x={xOffset + xPos} y={height - xTextOffset} className={className} key={`x${i}`}>{text}</text>);\r\n    }\r\n    for(let i = 0; i <= yNum; i++) {\r\n        let yPos = i * yPosIncrement;\r\n        let text = parseFloat((xyObjStats.yMin + i * yIncrement).toFixed(2)).toString();\r\n        labels.push(<text x={yTextOffset} y={height - yPos - yOffset} className={className} key={`y${i}`}>{text}</text>);\r\n    }\r\n    return labels;\r\n}\r\n\r\nexport class GraphSettings {\r\n    constructor() {\r\n        this.graphHeight = 220;\r\n        this.graphWidth = 400;\r\n        this.textClassName = \"\";\r\n        this.lineClassName = \"\";\r\n        this.xTextOffset = 2;\r\n        this.yTextOffset = 2;\r\n        this.xPrecision = 2;\r\n        this.yPrecision = 2;\r\n        this.xLabels = 2;\r\n        this.yLabels = 2;\r\n        this.xOffset = 35;\r\n        this.yOffset = 35;\r\n    }\r\n    setTextClass(className) {\r\n        this.textClassName = className ? className : this.textClassName;\r\n    }\r\n    setLineClassName(className) {\r\n        this.lineClassName = className ? className : this.lineClassName;\r\n    }\r\n    setSize(height, width) {\r\n        this.graphHeight = height ? height : this.graphHeight;\r\n        this.graphWidth = width ? width : this.graphWidth;\r\n    }\r\n    setTextOffset(x, y) {\r\n        this.xTextOffset = x ? x : this.xTextOffset;\r\n        this.yTextOffset = y ? y : this.yTextOffset;\r\n    }\r\n    setLabels(x, y) {\r\n        this.xLabels = x ? x : this.xLabels;\r\n        this.yLabels = y ? y : this.yLabels;\r\n    }\r\n    setPrecision(x, y) {\r\n        this.xPrecision = x ? x : this.xPrecision;\r\n        this.yPrecision = y ? y : this.yPrecision;\r\n    }\r\n    setOffsets(x, y) {\r\n        this.xOffset = x ? x : this.xOffset;\r\n        this.yOffset = y ? y : this.yOffset;\r\n    }\r\n}\r\n\r\nexport class Graph extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        console.log('new Graph()');\r\n        this.state = {\r\n            graphHeight: \r\n                this.props.graphHeight ? this.props.graphHeight : 220,\r\n            graphWidth: \r\n                this.props.graphWidth ? this.props.graphWidth : 400,\r\n            textClassName: \r\n                this.props.className ? this.props.textClassName : \"\",\r\n            lineClassName: \r\n                this.props.lineClassName ? this.props.lineClassName : \"\",\r\n            xTextOffset:\r\n                this.props.xTextOffset ? this.props.xTextOffset : 2,\r\n            yTextOffset:\r\n                this.props.yTextOffset ? this.props.yTextOffset : 2,\r\n            xLabels:\r\n                this.props.numXLabels ? this.props.numXLabels : 2,\r\n            yLabels:\r\n                this.props.numYLabels ? this.props.numYLabels : 2,\r\n        }\r\n    }\r\n\r\n\r\n    render() {\r\n\r\n        // Validating data, getting default values\r\n\r\n        if(!isDatasetValid(this.props.graphData)) \r\n            return <p>Data set needs to contain at least 1 {\"{{x: 0, y: 0}}\"} array entry</p>;\r\n        const xOffset = \r\n            this.props.xOffset ? this.props.xOffset : 35;\r\n        const yOffset = \r\n            this.props.yOffset ? this.props.xOffset : 35;\r\n\r\n        const xyStats = \r\n            getXYStats(this.props.graphData);\r\n        const xyCoordinates = \r\n            getDisplayData(this.props.graphData, \r\n                xyStats, \r\n                this.state.graphWidth, \r\n                this.state.graphHeight, \r\n                xOffset,\r\n                yOffset,\r\n            );\r\n        const labels = Lables(xyStats, \r\n            this.state.xTextOffset, \r\n            this.state.yTextOffset, \r\n            this.state.textClassName,\r\n            this.state.xLabels,\r\n            this.state.yLabels,\r\n            this.state.graphWidth,\r\n            this.state.graphHeight,\r\n            xOffset,\r\n            yOffset\r\n        );\r\n        let polylinePoints =  \"\";\r\n        xyCoordinates.forEach(val => {\r\n            polylinePoints += `${val.x},${val.y} `;\r\n        });\r\n        return (\r\n            <div>\r\n                <svg\r\n                    width={`${this.props.graphWidth}`}\r\n                    height={`${this.props.graphHeight}`}\r\n                    className={this.props.className}\r\n                >\r\n                    <polyline \r\n                        points={polylinePoints} \r\n                        className={this.state.lineClassName}\r\n                    />\r\n                    {labels}\r\n                </svg>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nfunction isDatasetValid(xyObjArr) {\r\n    return ('x' in xyObjArr[0]) && ('y' in xyObjArr[0]);  \r\n}\r\n\r\nfunction getXYStats(xyObjArr) {\r\n    let dataObj = xyObjArr.map(val => { return {x: val.x, y: parseFloat(val.y)} });\r\n    let xMin = xyObjArr[0].x, xMax = 0;\r\n    let yMin = dataObj[0].y, yMax = 0;\r\n    dataObj.forEach(val => { \r\n        xMin = xMin > val.x ? val.x : xMin;\r\n        xMax = xMax < val.x ? val.x : xMax;\r\n        yMin = yMin > val.y ? val.y : yMin;\r\n        yMax = yMax < val.y ? val.y : yMax;\r\n     });\r\n     const xRange = xMax - xMin;\r\n     const yRange = (yMax - yMin).toFixed(2);\r\n     return {\r\n        xMin: xMin,\r\n        yMin: yMin,\r\n        xMax: xMax,\r\n        yMax: yMax,\r\n        xRange: xRange,\r\n        yRange: yRange,\r\n     }\r\n}\r\n\r\nfunction getDisplayData(xyObjArr, xyObjstats, w, h, xNegOffset, yNegOffset) {\r\n    const height = h - (yNegOffset * 2), width = w - (xNegOffset * 2);\r\n    let dataObj = xyObjArr.map(val => { return {x: val.x, y: parseFloat(val.y)} });\r\n    let xMin = xyObjstats.xMin;\r\n    let yMin = xyObjstats.yMin;\r\n     const xRange = xyObjstats.xRange;\r\n     const yRange = xyObjstats.yRange;\r\n     const xMultiplier = width  / xRange, xOffset = 0 - xMin;\r\n     const yMultiplier = height / yRange, yOffset = 0 - yMin;\r\n     let convertedArr = dataObj.map(val => {\r\n         return {\r\n            x: Math.floor((val.x + xOffset) * xMultiplier) + xNegOffset,\r\n            y: height - Math.floor((val.y + yOffset) * yMultiplier) + yNegOffset\r\n        }\r\n     });\r\n     return convertedArr;\r\n}\r\n\r\nconst graph = {\r\n    Graph,\r\n    GraphSettings\r\n}\r\n\r\nexport default graph;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n// import Paper from '@material-ui/core/Paper'\r\nimport './index.css';\r\nimport { Graph } from './graphing.js'\r\nlet APIOrigin = \"/\";\r\n\r\nclass Main extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            year: new Date().getFullYear(),\r\n            currency: \"GBP\",\r\n            costPs: getPriceOnYear(this.props.changeObj, new Date().getFullYear()),\r\n            exchangeRates: this.props.currentRates,\r\n            exchangeRate: 1,\r\n            error: false,\r\n            errorMsg: \"\",\r\n        };\r\n    }\r\n    updateYear(year) {\r\n        const conversionObj = this.props.periodExchangeObj[`${year}`];\r\n        if(!conversionObj) {\r\n            this.setState({\r\n                error: true,\r\n                errorMsg: `Couldn't load exchange rates for year ${year}`,\r\n            })\r\n            return;\r\n        }\r\n        if(!conversionObj[this.state.currency]) {\r\n            let curr = \"\";\r\n            let code = this.state.currency;\r\n            this.props.currencyOptions.forEach(obj => { if(obj.code === code) curr = obj.value; });\r\n            this.setState({\r\n                error: true,\r\n                errorMsg: `No data for ${curr} for ${year}.`,\r\n            });\r\n            return;\r\n        }\r\n        this.setState({\r\n            year: year,\r\n            costPs: getPriceOnYear(this.props.changeObj, year),\r\n            exchangeRates: conversionObj,\r\n            exchangeRate: conversionObj[this.state.currency],\r\n            error: false,\r\n            errorMsg: \"\",\r\n        });\r\n    }\r\n    updateCurrency(val) {\r\n        if(this.state.exchangeRates[val])\r\n            this.setState({\r\n                exchangeRate: this.state.exchangeRates[val],\r\n                currency: val,\r\n                error: false,\r\n                errorMsg: \"\",\r\n            }); \r\n        else {\r\n            let curr = \"\";\r\n            this.props.currencyOptions.forEach(obj => { if(obj.code === val) curr = obj.value; });\r\n            console.log(curr);\r\n            this.setState({\r\n                error: true,\r\n                errorMsg: `No data for ${curr} for ${this.state.year}.`,\r\n            }); \r\n        }\r\n    }\r\n    getGraphData() {\r\n        const changes = this.props.changeObj;\r\n        const dateRange = new Date().getFullYear() - new Date(changes[0].x).getFullYear();\r\n        const startYear = new Date(changes[0].x).getFullYear();\r\n        const currency = this.state.currency;\r\n        let psDataset = [];\r\n        for(let i = 0; i <= dateRange; i++) {\r\n            psDataset.push({\r\n                x: new Date(changes[0].x).getFullYear() + i, \r\n                y: getPriceOnYear(changes, startYear + i)\r\n            });\r\n        }\r\n        let convertedDataset = [];\r\n        psDataset.forEach((val, i) => {\r\n            const rate = this.props.periodExchangeObj[startYear + i][currency]; \r\n            if(rate)\r\n                convertedDataset.push({\r\n                    x: val.x, \r\n                    y: parseFloat((val.y * rate).toFixed(2))\r\n                });\r\n        });\r\n        return convertedDataset;\r\n    }\r\n    render() {\r\n        let yearOptions = generateDateOptions(this.props.changeObj, this.props.periodExchangeObj, this.state.currency);\r\n        let currencyOptions = this.props.currencyOptions.map(val => {\r\n            let hidden = !(val.code in this.state.exchangeRates);\r\n            return(\r\n                <option \r\n                    value={val.code}\r\n                    key={val.code}\r\n                    hidden={hidden}\r\n                >{val.value}</option>\r\n            )\r\n        });\r\n        const graphData = this.getGraphData();\r\n        return (\r\n            <div className=\"mainBody\">\r\n                <h1 className=\"main_title\">International Freddo Index</h1>\r\n                <br />\r\n                <div className=\"inputLine\">\r\n                    <div className = \"inputGroup\">\r\n                        <label>Year: </label>\r\n                        <select \r\n                            id=\"year\" \r\n                            value={this.state.year}\r\n                            onChange={() => { this.updateYear(document.getElementById(\"year\").value); }}\r\n                        >{yearOptions}\r\n                        </select>\r\n                    </div>\r\n                    &nbsp;&nbsp;\r\n                    <div className = \"inputGroup\">\r\n                        <label>Currency: </label>\r\n                        <select\r\n                            id=\"currency\"\r\n                            value={this.state.currency}\r\n                            onChange={() => {\r\n                                this.updateCurrency(document.getElementById(\"currency\").value);\r\n                            }}\r\n                        >{currencyOptions}</select>\r\n                    </div>\r\n                    <nobr className=\"text\">\r\n                        1 Freddo : \r\n                        {` ${(this.state.costPs * this.state.exchangeRate).toFixed(2)} ${this.state.currency}`}\r\n                    </nobr>&nbsp;&nbsp;\r\n                    <nobr className=\"errorText\">{this.state.errorMsg}</nobr>\r\n                </div> <br />\r\n                <div className=\"kpiHolder\">\r\n                    <Graph \r\n                        className=\"mainKpi\" \r\n                        graphWidth={400}\r\n                        graphHeight={220}\r\n                        graphData={graphData}\r\n                        textClassName=\"kpiText\"\r\n                        xTextOffset={5}\r\n                        yTextOffset={5}\r\n                        lineClassName=\"line\"\r\n                    />\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n// General helper functions\r\n\r\nfunction generateDateOptions(list, periodExchangeObj, currency) {\r\n    let optionList = [];\r\n    let years = list.map(val => new Date(val.x).getFullYear());\r\n    for(let i = years[0]; i <= new Date().getFullYear(); i++) {\r\n        if(currency in periodExchangeObj[i])\r\n            optionList.push(<option key={i} value={i}>{i}</option>);\r\n    }\r\n    return optionList.reverse();\r\n}\r\n\r\nfunction getPriceOnYear(data, date) { \r\n    const range = data.map(val => {return {x: new Date(val.x).getFullYear(), y: val.y}});\r\n    if(date < range[0].x) return range[0].y;\r\n    if(date >= range[range.length - 1].x) return range[range.length - 1].y;\r\n    for(let i = 0; i <= range.length - 2; i++){\r\n        if(date >= range[i].x && date < range[i + 1].x) return range[i].y;\r\n    }\r\n    return 0;\r\n}\r\n\r\nasync function fetchJSON(uri) {\r\n    return fetch(uri).then(res => res.json());\r\n}\r\n\r\n\r\n// Code to run to get static reasources prior to app start\r\n\r\nasync function getChangeObj() {\r\n    return fetchJSON(`${APIOrigin}change-points.json`)\r\n        .then(data => data.changePoints)\r\n        .catch(e => { \r\n            console.log(\"Error getting change data.\"); \r\n            return [{\"x\": \"1999-01-01T00:00:00.000Z\", \"y\": 0}];\r\n        });\r\n}\r\n\r\nasync function getCurrencyOptions() {\r\n    return fetchJSON(`${APIOrigin}currency-values.json`)\r\n        .then(data => data.options)\r\n        .catch(e => { \r\n            console.log(\"Failed to get currency options.\"); \r\n            return [{\"code\": \"GBP\", \"value\": \"GB Pound Sterling\"}]; \r\n        });\r\n}\r\nasync function getCurrentRates() {\r\n    return fetchJSON(`https://api.exchangeratesapi.io/${new Date().getFullYear()}-01-01?base=GBP`)\r\n        .then(data => data.rates)\r\n        .catch(e => { \r\n            console.log(\"Failed to get initial conversion object.\"); \r\n            return {\"GBP\": 1}\r\n        });\r\n} \r\nasync function getPeriodExchangeRates(from, until) {\r\n    let retObj = {};\r\n    for(let i = from; i <= until; i++) {\r\n        let json = await fetchJSON(`https://api.exchangeratesapi.io/${i}-01-01?base=GBP`)\r\n            .then(data => data.rates)\r\n            .catch(err => { \r\n                console.log(`Error getting exchange rates for period ${i}.`);\r\n                return {\"GPB\": 1} \r\n            });\r\n        retObj[i.toString()] = json;\r\n    }\r\n    return retObj;\r\n}\r\nasync function main() {\r\n    APIOrigin = await fetchJSON('/data-origin.json').then(res => res.origin).catch(e => '/');\r\n    let changeObj = await getChangeObj();\r\n    let currencyOptions = await getCurrencyOptions();\r\n    let initConversionObj = await getCurrentRates();\r\n    let periodExchangeRates = await getPeriodExchangeRates(new Date(changeObj[0].x).getFullYear(), new Date().getFullYear());\r\n    ReactDOM.render(\r\n        <Main\r\n            changeObj={changeObj}\r\n            currencyOptions={currencyOptions}\r\n            currentRates={initConversionObj}\r\n            periodExchangeObj={periodExchangeRates}\r\n        />,\r\n        document.getElementById('root')\r\n    );\r\n}\r\nmain();"],"sourceRoot":""}